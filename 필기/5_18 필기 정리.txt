<5_18 필기>

오늘의 학습목표: 
1. 출력에 이어 입력을 해보자.
2. 산술연산자를 익혀보자.
3. 오류란 무엇인지 알아보자.





1. 출력과 입력
입력값을 받지 않는 코드는 값을 수정하려면 소스파일을 고쳐야 함.
입력값을 받는 코드는 코드를 수정하지 않아도 사용자가 원하는 값을 넣어 프로그램을 실행시킬 수 있음. 

입력은 변수에 받음.
리터럴 상수: literal constant
           변하지 않는 수.
변수 : 원하는 대로 값을 바꿔넣을 수 있는 저장공간.

입력을 할때 Scanner 클래스 사용.
입력을 받을 땐 데이터타입을 구분하여 다른 명령어를 씀.
Int를 입력받을 때: nextInt();
Double을 입력받을 때: nextDouble();
등 다양한 메소드가 존재함.


2. 산술 연산자 공부
+ 덧셈. / 문자열 사이 등 산술이 불가능한 값 사이에서 +를 쓰면 결합연산자로 작용.
- 뺄셈
* 곱셈
/ 나눗셈
% 나머지. 나머지 연산자를 활용하면 입력값의 배수 여부, 짝/홀수 여부 등을 알 수 있음.

3. 개발과정에서 발생하는 오류의 종류
  컴파일 오류(compile-error) 컴파일 과정에서 발생하는 오류.
  - 구문 오류(syntax error): 문법 규칙에 따르지 않아 생긴 오류
  - 의미 오류(semantic error): 계산식에서 호환이 되지 않는 서로 다른 타입의 데이터가 포함된 계산을 시도하는 경우
  
  실행오류(run-time error): 프로그램이 실행되는 도중에 발생하는 오류. 이것이 발생하면 프로그램이 비정상적으로 중단됨.
    좋은 프로그램은 실행오류가 발생하지 않는 견고한 프로그램.
	
  논리 오류(logical error): 컴파일, 실행에 문제가 없으나 의도하지 않는 결과를 발생시키는 경우. 값이 잘못 계산되는 경우가 그럼.
  
이러한 결함을 찾고 고치는 과정을 디버깅(debugging)이라고 함.
