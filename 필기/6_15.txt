6_15

학습목표
1. 추상메소드
2. 종단 클래스와 종단 메소드 (257p)
4. 인터페이스
5. interface Comparable
************************

인터페이스
  추상클래스의 극단으로, 추상메소드들로만 이루어진다. 객체와 객체 사이의 상호작용이 이루어지는 특정한 행동을 정의한다. 인터페이스는 필드를 가질 수 없다. 인터페이스 안의 모든 메소드는 추상메소드로 간주되므로 abstract 예약어를 사용할 필요가 없다.
또한, 인터페이스는 인스턴스를 생성할 수 없다. 클래슥 아니므로 new 연산자를 사용할 수 없다. 다만 다른 클래스에 의하여 구현(implement)될 수 있다. 인터페이스 구현은 즉 인터페이스에 정의된 추상메소드의 몸체를 정의하는 것. 인터페이스를 구현하는 구현체 클래스들은 무조건 메소드를 재정의해야 한다.
  인터페이스는 하나의 타입으로 보아야 한다. 이러한 "타입"은 인터페이스를 구현한 클래스들을 하나로 묶는 역할을 한다. 인터페이스의 이름은 클래스의 이름과 마찬가지로 참조변수를 정의하는데에 사용할 수 있다. 인터페이스의 이름은 배열을 정의하는데에도 사용할 수 있다!
  자바에서는 이중상속이 불가능한데, 이러한 한계를 인터페이스를 통해 극복할 수 있다.
  
  인터페이스의 이름 규칙: 대문자로 시작. 대부분 추상적인 동작에 집중하기 때문에 '할 수 있음' 같은 이름으로 표현이 됨. (ex: Flyable) 클래스와 헷갈릴 수 있으므로 앞에 I를 대문자로 붙이기도 함.
(코드)

----------------------------------------------------------------------------------------------------------------------------------------
  인터페이스 두가지: Comparable과 Comparator
Compareable은 compareTo(a);
Comparator은 compare(a, b);
의 메소드 하나씩을 가지고 있다.
Comparable: 이 인터페이스를 구현한 클래스 "자기자신"의 인터페이스 객체와 다른 인터페이스 객체를 비교할 수 있다. 자기 자신이 크면 양수 출력, 자기 자신과 같으면 0, 자기 자신이 작으면 음수 출력.
Comparator: 이 인터페이스를 구현한 클래스는 "특정 인터페이스 객체"와 "다른 인터페이스 객체"를 비교할 수 있다. (자기자신은 관계 X) 전자가 크면 양수, 같으면 0, 후자가 크면 음수 출력.

Arrays.sort(a) 메소드에서는 내부에서 Comparable, Comparator을  정렬기준으로 호출한다. 즉, 저 두 인터페이스를 활용하면 원시형 데이터타입이 아닌 데이터도 정렬할 수 있다. 특히, 이중배열 등을 일정한 기준으로 정렬할 수 있다!
아직 배우지 않은 <제네릭>이란 개념 사용. 차후에 배우고 지금은 느낌만 보기.
