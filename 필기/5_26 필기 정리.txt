<5. 26. 필기>

학습목표:
1. 메소드의 구조를 알아보자.
2. 메소드의 구성요소를 알아보자.
3. 메소드의 이름을 짓는 규칙을 알아보자.
4. 메소드의 내부 변수에 대한 유의점을 알아보자.
5. 궁금증 해결:: 호출명령을 내리지 않은 클래스의 메소드?


메소드: 입력을 받아서 처리를 하고, 처리 결과를 반환하는 소형 기계. 다른 언어의 함수와도 모양이 비슷함.

메소드의 구조 
메소드 머리(파라미터) { 
  메소드 몸통   
}

메소드 머리의 구조
접근제어지정자 반환형 메소드이름(파라미터)

ex)
public static int getSum(int a, int b) {
	int x=a+b;
	return x;
}

/*
	접근제어지정자: public 
	반환형: int
	메소드 이름: getSum
	파라미터: int a, int b
	메소드 몸통: a와 b를 더해서 변수 x에 저장하는 작동 수행
	반환값: x      */



메소드의 구성요소

접근제어지정자: 외부에서 접근을 허용하는지의 여부를 제어. 우리가 많이 쓴 public은 제한 없이 아무나 쓸 수 있다.

	* static 정적메소드 (객체 지향을 배우고 나면 알 수 있음!)

반환형: (return type)
return type: 메소드가 뱉어내는 것의 종류
  기본값: void: (직역: 공허, 없다는 뜻.)
  void 위치에 내가 출력하고자 하는 값의 타입을 적어주면 됨. 기본형, 참조형 모두 가능.
    ex) int: int 값을 뱉어냄. String: String값을 뱉어냄.
  return type를 적어두었다면 return문을 통해 출력값을 만들어야 함.
  
  메소드를 호출할 땐 피라미터(값 갯수, 타입)를 맞추지 않으면 안됨! 컴파일 에러.


Method body:
메소드의 동작부. 소스코드가 들어감.
return 반환값; 메소드에서 만들어진 값을 반환할 때 return 사용. return을 만나면 그 메소드는 동작이 종료됨. 메소드가 가질 수 있는 반환값은 무조건 하나.


메소드의 위치: 클래스 안에 위치

메소드의 이름
메소드의 이름은 변수이름짓는 규칙과 같음. 영소문자. 여러 단어가 있으면 다음 단어의 첫번째 글자를 대문자로. 동사로 표현.
메소드 안에서 그 메소드와 이름이 같은 변수를 생성하고 쓸 수 있음.

메소드 내부 변수
메인메소드 밖에서 생성한 메소드 안에서 생성한 변수는 지역변수라 그 안에서만 쓸 수 있음. 
메인메소드에서 호출 불가.
메인메소드 안의 변수 x와 메인메소드 밖의 메소드b 내부의 변수 x는 서로 다른 변수. 한 변수를 공유하는 것이 아님을 주의.




  

****************************

** 우리는 어떻게 클래스나 메소드의 작성이나 호출 없이 String타입의 메소드를 쓸 수 있을까?

우리가 지금까지 했던 건 import로 클래스를 호출하거나, 우리가 메소드를 생성해서 호출하는건데 

String타입의 메소드 같은 건 대체 어디서 가져오는건지 궁금. String타입의 클래스, 메소드를 가져온다는 명령은 한번도 컴퓨터에 내린 적이 없는데.

java.lang 
  기본적으로 import된 패키지. 호출명령을 내리지 않아도 쓸 수 있음. String 클래스는 java.lang 안에 존재함.
  
