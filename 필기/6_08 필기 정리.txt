<06 08>


학습목표
1. 배열과 반복문을 이용한 다양한 메소드 만들어보기
2. for-each루프
3. 가변파라미터
4. 참조타입 배열

 *********************************************************

1. 배열과 반복문을 이용한 다양한 메소드 만들어보기






2. for-each 문

일반 for문에서는 조건식과 증감식을 둠.

for-each문은 배열을 순환하고자 할 때 사용할 수 있는 표현.

for문은 무조건 인덱스0부터 인덱스n까지 순차진행을 하고, for-each문은 값을 읽는 용도로만 사용하지 값을 수정하는 용도로는 사용할 수 없음에 주의. 역순으로 배열 원소를 처리하는 경우, 전체가 아니고 일부 원소만을 처리하는 경우, 하나의 반복루프에서 두개 이상의 배열을 처리하는 경우 등에는 전통적인 for문을 사용.

 

문법:

for (배열의 원소값 하나를 가져올 수 있는 변수 선언:배열 이름) {
    // 반복 문장들
}

ex)
int[] array = {10, 20, 30, 40, 50}
    for (int number : array) {
        System.out.println(number);
    }



3. 가변길이 파라미터
  값 여러개를 매개변수로 받을 때 배열의 형태로 받아, 메소드로 데이터를 전달할 때 유동적인 갯수를 받을 수 있게 하여 유연한 코드를 만들 수 있다. 이 때 배열을 만들어 입력하는 것이 번거로워 생겨난 기능이 "가변길이 파라미터". 파라미터가 여러개 있을 시 가변길이 파라미터는 파라미터 중 마지막에 위치해야 함.

가변길이 파라미터로 받은 값은 배열처럼 씀.

 

ex)

public static void someMet2(int ... arr) {  
    for (int number: arr) {   
        System.out.println(number);      
    }
}

 

public static void main(String[] args) {

    someMet2(1, 2, 3, 4, 5);

}

 

출력결과:

1

2

3

4

5

 

 

4. 참조타입 배열

배열 원소는 변수; 자바의 변수는 기초형과 참조형으로 나뉘므로 따라서 배열도 기초타입, 참조타입으로 나뉜다. 포켓몬으로 예를 들어, pokemonBox라는 이름의 30칸짜리 배열이 있다고 치자, pBox의 각 원소들은 pBox안에 들어가는 '포켓몬 객체'의 참조값을 가진다.

  pokemonBox[] = {피카츄, 파이리, 꼬부기, 이브이}

배열이 만들어지면 실제 객체가 저장되는 것이 아니라 변수가 만들어지는 것. 실제 객체는 변수에 저장을 해 줘야 함.

 

pokemon[] pokemonBox = new pokemon[30]

    pokemonBox[0] = new pokemon();

    pokemonBox[1] = new pokemon();

    ...

    ...

    pokemonBox[29] = new pokemon();
