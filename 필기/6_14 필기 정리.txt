06. 14. 필기
학습목표
1.  최상위 클래스, 종단클래스, 종단메소드
2.  추상 클래스와 추상 메소드
3.  상속 구조에서의 형변환과 다형성
******************************************************

1. 최상위 클래스, 종단 클래스, 종단 메소드
  - 최상위 클래스: Object
  명시적으로 수퍼클래스를 선언해주지 않으면 Object 클래스가 최상위계층 클래스가 됨. 자바에서 모든 클래스는 사실 Object를 암시적으로 상속받고 있는 것. 그런 점에서 Object는 모든 클래스의 조상이라고 할 수 있음.
  Object 클래스가 가지고 있는 메소드들이 있음. 상황에 따라 자신의 용도에 맞도록 위 클래스들을 재정의할 필요가 있음. Object 클래스의 메소드들을 익혀둘 것
  protected Object clone(): 객체 자신의 복사본을 생성해서 반환
  public boolean equals(Object obj): obj가 이 객체와 같은지를 확인
  public String toString(): 객체의 문자열 표현을 반환
  public int hashCode(): 객체에 대한 해쉬코드 반환
  public final Class getClass(): 객체의 실행클래스 정보 반환
등등 ...
  - 종단 클래스
   서브클래스를 만들 수 없는 클래스. 상속의 종단. 보안상의 이유로, 서브클래스를 만들어 시스템으로 하여금 시스템을 파괴할 수 있기 때문에 중요한 클래스에 대해서 종단 클래스 사용. 대표적으로는 String 클래스가 있음. 종단클래스를 선언할 땐 클래스의 선언 맨 앞에 final을 붙임. 이것이 선언되면 그 클래스는 상속할 수 없음. 종단클래스 안의 모든 클래스는 종단메소드로 만들지 않아도 모두 종단메소드가 됨.
  - 종단 메소드
  하위클래스에서 재정의할 수 없는 메소드. 종단 클래스의 메소드 범위라고 생각할 수 있음. 
(코드)

-------------------------------------------
2. 추상 클래스와 추상 메소드
  추상클래스: 완전하게 구현되어있지 않은 메소드를 가지고 있는 클래스. 미완성인 클래스. 추상적인 개념의 클래스. 예를 들어, 다른 구체적 동물들의 상위클래스 Animal은 그 객체가 어떤 동물인지 모르므로 구체적인 동작을 구현하기 어려움. 이런 경우에 Animal은 추상클래스로 정의됨. 추상클래스는 서브클래스로 추상클래스를 가질 수도 있음.
 클래스 선언 시 앞에 abstract를 붙임. 
 추상클래스는 추상메소드를 가짐. 추상메소드란 body가 없는 메소드로, 추상클래스가 아닌 서브클래스에서 반드시 추상메소드를 재정의해주어야 함. 일반 클래스는 추상 메소드를 가질 수 없음. 그 클래스의 객체를 만들 때 미완성인 추상메소드 때문에 미완의 객체가 되어버리기 때문.
추상메소드는 결과적으로 수퍼클래스에서 body가 없는 일반메소드로 정의한 후 서브클래승서 재정의(Override)하는 것과 같음. 그러나 추상메소드는 "반드시" 재정의할 것을 강제한다는 점에서 장점이 있음.
(코드
)

-------------------------------------------
  - 다형성
  같은 명령을 내려도 객체의 타입이 다르면 서로 다른 결과를 얻는 것. 일례로, 강아지 타입에게 짖으라는 명령을 내리면 왉와르륽컹 하지만 고양이에게 짖으라고 하면 먉 애옭 꺙 한다.
  상향 형변환(up casting)
서브클래스의 객체는 수퍼클래스의 객체처럼 취급딜 수 있음. 서브클래스 객체 안에는 수퍼클래스의 객체가 포함되어 있기 때문. 수퍼클래스 객체가 있는 곳을 서브클래스 객체로 대치하는 것이 "상향 형변환".
  다만, 서브클래스 중 수퍼클래스로부터 상속받은 부분만을 객체를 통해 사용할 수 있고 나머지는 사용할 수 없음에 주의. 상향형변환은 자동적으로 이루어짐.
  하향 형변환(down casting)
  상향 형변환과 반대로, 서브 클래스 참조 변수로 수퍼 클래스 객체를 참조하는 것. 일반적인 상황에서는 에러. 다만 서브클래스 객체인데 형변환에 의하여, 일시적으로 수퍼클래스 참조변수에 의해 참조되고 있는 경우에는 하향 형변환을 통해 원래 상태로 되돌릴 수 있다. 이때에는 명시적으로 형변환 연산자를 적어주어야 한다.
  *instanceof: 참조변수가 가리키는 객체의 실제 타입을 알려줌. 객체 a가 타입 b면 true 반환, 아니면 false 반환.

- 메소드의 매개변수를 선언할 때 다형성을 많이 이용. 일반적으로 매개변수는 수퍼클래스 타입으로 선언하는 것이 좋음. 객체로 수퍼클래스에서 파생된 모든 객체를 받을 수 있으니까.
