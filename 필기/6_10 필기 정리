06 10

학습목표
1. 배열 정렬하기
2. 원시형 데이터 객체화하기 (Wrapper Class)
3. Long보다 더 큰 크기의 실수 데이터를 담는 법
4. 2차원 배열
*********************************

1. 배열을 정렬하기
배열을 정렬하는 두 가지 방법- java.util 패키지의 Arrays 클래스 활용하기, 정렬 알고리즘 활용하기.

java.util 패키지의 Arrays 클래스: 
원시형 타입의 데이터일 경우 사용함. 참조형이 포함된 배열은 이것으로 할 수 없음. 
Arrays.sort(배열) :: 오름차순으로 정렬하는 소트 메소드. 정렬 대상 범위를 지정하는 것도 가능.
정렬 조건을 달리 하려면 정렬할 클래스 내에 구현되어 있는 Comparable 인터페이스를 건드려야 하는데, 인터페이스 개념은 차후에 배울 예정.

int[] arr = {50, 30, 20, 60, 10};
Arrays.sort(arr);
// 결과: [10, 20, 30, 50, 60]

**
Arrays 메소드의 다른 메소드:
Arrays.binarySearch(배열, 찾는 값) :찾는 값의 인덱스를 알려줌 
int[] arr = {50, 30, 20, 60, 10};
int index = Arrays.binarySearch(arr, 20);
System.out.println("20의 인덱스: "+index);
// 결과: 20의 인덱스: 2

Arrays.toString(배열) : 배열을 문자열의 형태로 출력. 클래스 내부에 동일한 이름의 메소드를 만들면 다른 형태로도 출력 가능. 이 메소드가 만들어져 있을 때 출력에 배열의 참조변수 이름을 넣으면 자동적으로 toString()으로 출력됨.
기본형: [10, 20, 30, 40]
**

정렬 알고리즘: 원소들을 일정한 순서대로 열거하는 알고리즘. 여러 종류가 있으며 지금도 새롭게 연구되고 있다. 위키백과 참조
https://ko.wikipedia.org/wiki/%EC%A0%95%EB%A0%AC_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98


*********************************

2. Wrapper Class
원시형 데이터를 객체화 하여 사용할 때 원시형 데이터를 Boxing(포장)하는 Wapper Class를 작성할 수 있다. 

Wrapper Class의 종류:
Byte
Short
Integer
Long
Float
Double
Character
Boolean

		Integer i = new Integer(10);	// 원시형 데이터 하나를 가진 참조형 객체
		Integer i2 = Integer.valueOf(500);	// boxing
		int primitiveInt=i2.intValue();		// unboxing
		
		// System.out.println(primitiveInt);
		Integer auto=100;	// auto-boxing
		int un = auto;
		
		Integer value = Integer.valueOf("5959");	// 문자열을 숫자로
		Integer.parseInt("90");
		
		int number1=10;	// 원시형 타입. 안에 메소드 없음.
		Integer refNumber=Integer.valueOf(10); // 참조형 타입. 메소드를 가짐!
		System.out.println(refNumber.doubleValue());	// double 형으로 출력
		
		
*********************************

3. 원시형 데이터보다 더 큰 실수, 정수 데이터를 담는 법


	BigInteger value1 = new BigInteger("99999999999999999999999999"); 
		// Long보다 큰 값을 문자열 형태로 다룰 수 있게 생성자 사용해서 만든 객체.
		System.out.println(value1.add(new BigInteger("100")));
		//더하고 싶을 땐 다른 BigInteger 변수를 만들어 .add() 연산자를 써야 함!
		System.out.println(value1);
		value1=value1.add(new BigInteger("100"));	// 변경하고싶으면 이렇게
		System.out.println(value1);
		
		BigDecimal dec = new BigDecimal("0.123123"); // 기이이이인 실수형
		System.out.println(dec);
		BigDecimal d=new BigDecimal(0.1);
		System.out.println(d);
		
		
*********************************

4. 2차원 배열
  많은 데이터들을 하나로 묶어서 처리할 때 유용한 자료구조. 객체로 배열을 받는 배열.
  
  double[][] s=new double[줄의 수][칸의 수]
  첫번째 인덱스는 줄의 번호, 두번째 인덱스는 칸의 번호. 예를 들어 1줄 3칸의 원소의 인덱스는 s[1][3].
  
  double[][] s=new double[3][5]
  s.length // 줄 갯수
  s[0].length	// 칸 갯수
  int[][] arrAnother = { { 2, 4, 6 }, { 3, 6, 9 }, { 4, 8, 12 } }; // 이렇게도 초기화가능
  System.out.println(Arrays.deepToString(arr2d)); // 2d배열에서 쓰는 toString
  // 2d배열에서 쓰는 Array.equals(a, b) => Array. deepEquals(a, b);
  
  
  
  import java.util.*;

// 랜덤 2차원 배열의  열의 합, 행의 합, 7의 갯수 구하기
public class Ex2Array2D {

	public static int[][] randomArray() {	// 랜덤 배열 만들기
		Random random = new Random();
		int[][] array = new int[7][9];

		for (int i = 0; i < array.length; i++) {
			for (int j = 0; j < array[i].length; j++) {
				array[i][j] = random.nextInt(10);
			}
		}

		return array;
	}

	public static void deepToString(int[][] randomArray) {	// 랜덤 배열 출력
		for (int i = 0; i < randomArray.length; i++) {
			for (int j = 0; j < randomArray[i].length; j++) {
				System.out.printf("%d  ", randomArray[i][j]);
			}
			System.out.println();
		}
	}

	public static void main(String[] args) {
		int[][] randomArray = randomArray();
		deepToString(randomArray);

		int[] rowSum = new int[randomArray[0].length]; // 칸의 합
		int[] columnSum = new int[randomArray.length]; // 줄의 합
		int sevenCount = 0;		// 7 갯수

		for (int i = 0; i < randomArray.length; i++) { 	
			for (int j = 0; j < randomArray[i].length; j++) {
				columnSum[i] += randomArray[i][j];
				rowSum[j] += randomArray[i][j];
				if (randomArray[i][j] == 7)
					sevenCount++;
			}
		}
		System.out.println("-----------------------");

		for (int i = 0; i < rowSum.length; i++) {
			if (i<columnSum.length)System.out.printf("%d열의 합: %d  |  ", i + 1, columnSum[i]);
			System.out.printf("%d행의 합: %d\n", i + 1, rowSum[i]);
		}
		System.out.println("-----------------------");
		System.out.printf("7 갯수: %d\n", sevenCount);

	}
}
