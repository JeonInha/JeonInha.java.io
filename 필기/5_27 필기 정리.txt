<5. 27. 필기>

학습목표
1. 상수를 알아보자.
2. 전역변수를 알아보자.
3. 객체지향 프로그래밍에 대해 알아보자.
4. 클래스와 인스턴스에 대해 알아보자.
5. 객체의 생성, 사용, 소멸에 대해 알아보자.

***********************************************


Static variable and const . 상수와 전역변수.

상수. 변해서는 안되는 값을 표현할 때 사용함. 초기화 이후 상수값을 변경하려고 하면 컴파일 에러가 남.
전 글자 대문자로 작성하는 것이 관례. 스페이스바 구분은 언더바.

문법:
final int FINAL_NUMBER=3; // 3으로 초기화. 상수 고정.
FINAL_NUMBER++;  // 증감할 수 없음. 에러남.
FINAL_NUMBER=5  // 다른 값을 다시 대입할 수 없음. 에러남.

변수와 문법이나 동작이 유사함. 차이점은 값이 변할 수 있는지의 여부 정도. 다만 메소드로 파라미터를 받을 때 파라미터 타입을 변수형으로 하면 상수의 값을 변수로 받아 값이 변경될 수 있음. 메인메소드의 상수를 다른 메소드에서 쓸 때는 파라미터 타입을 상수로 지정하자.

ex) Math.PI

전역변수:
class에서 선언. 모든 곳에서 사용 가능한 변수. 다른 메소드, 클래스에서도 접근이 가능함.
static이 붙은 것은 다른 클래스에서도 접근이 가능함.
public이 붙은 것은 클래스 이름으로 전역변수를 호출 가능하고 아무데서나 불러서 사용 가능. (Ex) Math 클래스의 전역변수 PI는 Math.PI로 불러내어 사용할 수 있음.

전역변수가 많아질수록 넓은 범위에서 변할 수 있는, 관리해야 하는 것들이 많아지므로 코딩이 어려워짐. 가능하면 관리가 쉽도록 상수로 지정해주거나 하는 방식으로 관리하기 쉽게 하는 것이 좋음.



*********************************


객체지향 프로그래밍

모든 현실의 Something을 객체(Object)로 인식하는 것에서부터 시작.

객체? 세상의 모든 것. 물리적인 물체와 추상적인 아이디어를 포함. 객체는 "상태"와 "동작"을 가짐.

객체지향 프로그래밍: 상태와 동작을 가지는 "객체(실제)"를 코드로 적어내어(=클래스 생성), 코드로 객체(내가 만든 것. 가상.)를 생성(=인스턴트 생성). 객체들 간의 메시지를 주고 받으며 상호작용하여 프로그램의 흐름을 만들어내는 것. 절차 지향 프로그래밍은 데이터가 함수와 분리되어 차후에 변경하거나 확장하기 어려운 반면, 객체 지향 프로그래밍은 이를 해소할 수 있다는 장점이 있음.
  객체 지향 프로그래밍의 특징은 캡슐화, 정보 은닉, 다형성, 상속 등이 있음.


객체의 구성요소
  값/상태 -> 멤버변수(menbervariable) / 필드(fields)
  기능 or 동작 -> 메소드(Method)
  
  *********************************************
  
  클래스와 인스턴스
  
  클래스: 특정한 종류의 객체들을 찍어내는 형틀 또는 청사진. 하나의 소스파일에는 하나의 클래스만을 담는 것이 원칙이다. 하지만 public으로 선언된 클래스가 있다면, 이 클래스의 이름으로 파일 이름을 작성하여 하나의 파일에 여러개의 클래스를 담을 수 있다.
  
  인스턴스: 클래스로부터 만들어지는 각각의 객체
  
포켓몬에 비유하면:: 
  클래스: 포켓몬이라는 개념. 타입, HP, 공격력, 방어력, 속도, 레벨, 배운 기술 등의 값이 있음.(필드), 포켓몬은 경험치를 얻으면 레벨업을 한다, 싸울때는 기술을 쓴다 등의 동작을 할 수 있음.(메소드)
  인스턴스: 
    =오박사님에게 받은 나만의 "피카츄"라는 객체. 값에 Lv이 5, 공격력과 속도는 높음, 방어력과 HP는 낮음, 배운 기술은 전광석화와 10만 볼트라는 값을 가지고 있음. 메소드를 사용하여 레벨업, 기술 사용 등의 동작을 함. 
    =갈색체육관 관장의 피카츄는 몸통박치기와 스파크라는 기술을 배우고 있음. 레벨은 15임. 레벨업, 기술 사용 등의 동작을 함.

  이렇듯 인스턴스 안의 데이터들은 각각 가질 수 있음. 하지만 메소드는 공유함. 
  
  **********************************************
  
	객체의 생성, 사용, 소멸

	이하에서 포켓몬 비유를 계속 사용함.
	
	객체의 생성:
	Pokemon pikachu=new Pokemon();
	
	Pokemon=pikachu  // 포켓몬 타입의 객체를 참조할 수 있는 변수 피카츄를 선언한다.
	pikachu=new Pokemon();  // 생성된 새로운 객체의 참조값을 피카츄라는 참조 변수에 대입한다.
	
	객체의 사용:
	pikachu.type="electric";	// 피카츄가 참조하는 포켓몬이라는 객체로부터 포켓몬타입이라는 필드에 접근, 전기타입이라는 값을 입력한다.
	pikachu.skill1="전광석화";	// 피카츄가 참조하는 포켓몬이라는 객체로부터 1번스킬이라는 필드에 접근, 전광석화라는 값을 입력한다.
	pikachu.useskill(1);		// 피카츄가 참조하는 객체로부터 스킬사용()이라는 메소드 호출. 스킬사용() 메소드는 스킬 번호라는 입력값을 가짐. 스킬번호 1에 어떤 스킬을 저장했는지 가져와서 그 스킬을 사용하는 동작을 함.
	
	객체의 소멸: 나의 피카츄가 "야생 피카츄"를 쓰러트리는 경우 "야생 피카츄"라는 인스턴트 객체의 사용이 끝난다. 자바에서는 사용이 끝난 객체를 스스로 판별하여 지우는 기능이 있다. 이를 쓰레기 수집이라고 한다. 다만 쓰레기 수집을 하는 동안 프로그램이 잠시 멈춘다는 단점도 존재한다.(ms단위의 시간 소요) 
	