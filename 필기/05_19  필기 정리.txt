05. 19. 필기

학습목표

1. 어제의 연습문제들을 풀이하자
2. 자료형 중 원시형(기본형)을 학습하자.
3. 연산자를 학습하자.
4. 두 변수의 값을 교환하는 방법을 익히자.

*********************************

printf()
출력 형식을 지정할 수 있는 메소드. 
System.out.printf("출력형식", 값, 값, 값 .. ); 의 형태.
Ex) 

출력형식은 아래 오라클 문서를 참조:
https://docs.oracle.com/javase/tutorial/java/data/numberformat.html


*********************************

Datatype 
  자바에서는 변수에 저장되는 자료의 타입, 즉 자료형을 강력하게 규제하는 언어다. 변수에는 지정한 자료형의 값만 넣을 수 있다. 자료형은 크게 "기초형"과 "참조형"으로 나눌 수 있다.
  
  기초형: 변수의 값을 저장. 정수형, 실수형, 논리형, 문자형
  참조형: 변수에 객체의 위치를 저장. 클래스, 인터페이스, 배열, 문자열(String)
  
정수형: 
-byte / 8bit
-short / 16bit
-int / 32bit
-long / 64bit
 아래로 갈수록 더 넓은 범위의 수를 표현할 수 있다.
 일상적으로 쓰는 것은 int이나 더 큰 값이 필요할 땐 long을 사용하기도 한다.
 long을 쓸 땐 컴파일러가 이 숫자가 long타입임을 알리기 위해 뒤에 L을 붙여 표현한다. 
 자릿수를 표현할 땐 일상적으로 쓰는 쉼표 대신 밑줄을 사용하여 표현한다.
 ex) int i = 10_000_000;
 정수형끼리는 데이터형이 달라도 연산할 수 있지만, 정수끼리의 연산에서 데이터형은 더 큰 데이터형에 따라감에 유의한다. 큰 범위의 정수형은 작은 범위의 정수형을 표현할 수 있다.

실수형:
-float / 32bit
-double/ 64bit
float보다 double에서 뒷자리에 올 수 있는 소숫점의 갯수가 많다. 이는 오차범위가 double타입에서 더 적다는 뜻이다. 대부분의 연산에서 double형을 주로 사용한다. float을 쓸 땐 컴파일러에게 이 수가 float 타입임을 알리기 위해 뒤에 f를 붙여 쓴다.
ex: float f=123.456f


논리형: boolean 타입. 이 타입은 값으로 true, false 딱 둘만 올 수 있다. 이를 1과 0으로 표현할 수 있는 언어들도 있으나 자바는 true, false 둘로만 표현한다.

문자형:
-char / 16bit
char에는 하나의 유니코드 문자만을 저장할 수 있다. 유니코드로도 입력할 수 있고 문자형을 숫자로도 표현할 수 있다. char형 변수끼리 연산을 하면 결합하는 것이 아닌 산술을 한다.
문자형은 이것이 문자형임을 알리기 위해 홑따옴표를 쓴다.
  
*********************************

연산자
연산자는 데이터를 가지고 하는 특정한 연산을 나타내는 기호다. 종류를 나누어 알아보자.

대입 연산자:
"=". 왼쪽에 있는 변수에 오른쪽에 있는 수식의 값을 대입한다.

산술 연산자: 저번 게시글 참조.

복합 대입 연산자: 대입연산자와 산술연산자를 합쳐놓은 연산자다.
ex) a+= 5; 는 a=a+5라는 뜻이다. 복합대입연산자는 소스를 간단하게 만든다.

증감 연산자: ++ 혹은 -- 기호를 사용하여 변수의 값을 1씩 증가시키거나 감소한다. 증감연산자가 변수의 앞, 뒤 중 어디에 오느냐에 따라 값 사용과 변수의 증감 순서가 달라짐에 유의한다.
  a++ : a값을 먼저 사용한 후 1을 증가시킴.
  --a : 1을 감소시킨 다음 a 값을 사용함.

관계 연산자: 두 값을 비교하는데에 사용한다. 결과값은 boolean값으로 출력된다.
    x == y // x와 y가 같은가?
	x != y // x와 y가 다른가?
	x >  y // x가 y보다 큰가?
	x <  y // x가 y보다 작은가?
	x >= y // x가 y보다 크거나 같은가?
	x <= y // x가 y보다 작거나 같은가?
	
	단, 0 <= x <=100 과 같이 두 관계연산을 함께 사용할 수 없다. (0 <= x 연산을 할 때 boolean값을 도출하고, boolean값과 정수 사이에서 관계연산 할 수 없어 컴파일 오류가 난다.) 이 동작을 수행하려면 후술할 논리연산자를 이용.

논리 연산자: 두 관계연산을 결합하여 참 거짓을 따질 때 사용한다. 

    x && y   AND의 의미
    x || y   OR의 의미
    x !  y	 NOT의 의미
