05. 30. 필기

학습목표
1. 생성자를 알아보자.
2. 접근제한자를 알아보자.
3. 클래스 사이의 관계를 알아보자.
4.
***********************************

String class의 format메소드: printf와 동일한 문법으로, 서식대로 String값을 반환

ex: return String.format("%02d", year%100);		// 연도를 끝 두자리수만 표현하여 리턴



******************************

Scanner sc=new Scanner(System.in);
필드 초기화. 생성자(constructor)
메소드의 일종이라고 할 수 있음. 생성자는 클래스 안에서 선언되어서 객체가 생성될 때 필드에 초기값을 제공하고 필요한 초기화 절차를 실행. 하나의 클래스에 여러개의 생성자를 중복정의하는 것도 가능.

기본 생성자(디폴트 생성자): 생성자를 만들지 않을 경우 자동적으로 만들어지는 생성자. 필드의 초기값을 기본값으로 초기화.
기본값: 정수형, 문자형은 0, 실수형은 0.0, 논리형은 false, 참조형은 null

생성자를 만들어 지정하는 순간 기본생성자로 필드초기화를 할 수 없음. 기본생성자는 생성자가 없을때만 만들어지기 때문에 생성자를 따로 만들고 기본생성자도 쓰고 싶다면 기본생성자 메소드를 명시적으로 적어서 넣어줘야 함.

생성자에서 다른 메소드를 호출할 수 있음. this를 사용하여 하나의 생성자에서 다른 생성자를 호출하기도 함. 콘솔 출력같은 것도 할 수 있고. 

this() 예약어: 컴파일러가 메소드 시그니처를 보고 적절한 생성자를 호출. 다른 생성자를 호출하는 문장은 생성자의 맨 첫번째 문장. 생성자 중에서도 파라미터의 타입, 순서, 갯수가 일치하는 것을 가져옴. 생성자 메소드의 첫줄에서 사용하여야 함!

this = 자기자신-현재객체-을 호출. 용도가 여러개임. 자기참조일 경우 붙지만 경우에 따라 생략할 수 있음. 필드 이름과 파라미터의 이름이 동일할 때 구분하기 위해서도 사용.
this() = 자기자신 중에서도 생성자를 호출


****************************

접근제어
다른 클래스가 특정한 필드나 메소드에 접근하는 것을 제어. 클래스 수준, 멤버 수준이나 메소드 수준이 있음.
클래스 수준의 수식어: public(공용 클래스) // pakage 수준의 클래스는 수식어 없음.
필드와 메소드(멤버)수준: 접근지정자는 public(모든 클래스가 사용 가능), private(클래스 안에서만 사용) 등이 있음.접근제한자가 없으면 자동적으로 같은 패키지 안에 있는 클래스가 접근할 수 있는 패키지 수준의 클래스가 됨. 패키지 수준은 접근지정자가 없음.

private: 자기 자신의 클래스 안에서만 변경할 수 있음. 밖에서는 볼 수 없게 숨겨둠. 바깥에서는 보지 않아도 되는 정보를 넣어 보안을 꾀해볼 수 있음. 외부에서 접근, 출력할 수 있게 메소드를 만드는 건 가능.

외부에서 접근, 출력할 수 있게 만드는 메소드를 관례적으로 다음과 같이 부름
setter 설정자: 값을 설정
getter 접근자: 값을 출력

접근제어로 인해 생겨나는 자바의 두가지 특성: 캡슐화, 추상화
캡슐화: 정보를 내부에서 보호할 수 있게끔 감춰놓는 것.
추상화: 사용자 입장에서 정보를 못보게 숨겨놓는 것

********************************
사용 관계(use): 하나의 클래스가 다른 클래스를 사용
클래스 A의 메소드에서 클래스 B의 메소드들을 호출. 호출하려면 클래스 객체에 대한 참조를 가져야 함. 스캐너를 사용할 때 스캐너 클래스를 호출하고 매개변수를 생성하여 스캐너를 사용했던 그것. 하나의 클래스가 자기 자신을 사용할 수 있음.

집합 관계(has -a): 하나의 클래스가 다른 클래스를 포함
하나의 객체 안에 다른 객체들이 포함. 정확히는, 하나의 객체 안에 객체들에 대한 참조를 포함. 클래스는 다른 클래스의 객체에 대한 참조를 멤버로서 가질 수 있음. 예를 들면, 학급 클래스는 학생 클래스의 객체에 대한 참조를 멤버로서 가질 수 있음.

상속(is-a): 하나의 클래스가 다른 클래스를 상속
다음에 자세히 배우기로